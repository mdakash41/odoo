from odoo import models,fields,api,_
import pytz
class HospitalAppointment(models.Model):
    _name = 'hospital.appointment'
    _description = 'Appointment'
    _inherit = ['mail.thread', 'mail.activity.mixin']
    _order = 'id desc'
    _rec_name = 'patient_id'



    @api.model
    def create(self, vals_list):
        if vals_list.get('name',_('New')) == _("New"):
            vals_list['name'] = self.env['ir.sequence'].next_by_code('hostpital.appointment') or _('New')
        result = super(HospitalAppointment, self).create(vals_list)
        return result

    # NOTE: this function is used to set the default value for set
    @api.model
    def default_get(self, fields_list):
        result = super(HospitalAppointment, self).default_get(fields_list)
        result['patient_id'] = 5
        result['notes']='This default string is comming from the api.model get_default funciton'
        return  result


    @api.onchange('partner_id')
    def OnChange_parner_id(self):
        for record in self:
            return {
                'domain': {
                    'order_id': [('partner_id','=',record.partner_id.id)]
                }
            }

    def write(self, vals):
        res = super(HospitalAppointment, self).write(vals)
        print("overriding test function")
        return res

    def get_default_value(self):
        return "This is a default value generated by a function name get_default_value"


    #button name defiend in appointment.xml file
    def action_confirm(self):
        for record in self:
            record.state = 'confirm'

    #button name defiend in appointment.xml file
    def action_done(self):
        for record in self:
            record.state = 'done'

    def action_delete_onetomany(self):
        for record in self:
            print("time in UTC",record.appointment_date)
            user_tz=pytz.timezone(self.env.context.get('tz') or self.env.user.tz)
            print("user tz",user_tz)
            date_today = user_tz.localize(record.appointment_date).astimezone(user_tz)
            print("time in local timezone",date_today)


            record.appointment_lines = [(5,0,0)]

    name = fields.Char(string='Appointment ID', required = True, copy = False, readonly = True,
                       index = True, default= lambda self:_('New')
                       )
    patient_id = fields.Many2one('hospital.patient',string="Patient",required = True)
    patient_age = fields.Integer("Age", related='patient_id.patient_age')
    notes = fields.Text(String='Registration Note', default=get_default_value)
    doctor_note = fields.Text(String='Doctor Note')
    appointment_lines = fields.One2many('hospital.appointment.lines', 'appointment_id', string="Appointment Lines")
    pharmacy_note = fields.Text(String= 'Pharmacy Note')
    appointment_date = fields.Date(string="Date", required=True)
    state = fields.Selection([
        ('draft', 'Draft'),
        ('confirm', "Confirm"),
        ('done','Done'),
        ('cancel','Cancelled'),
    ], string='Status', index=True, readonly=True,default='draft')

    partner_id  = fields.Many2one('res.partner',string='Customer')
    order_id = fields.Many2one('sale.order',string="Sale Order")


    class HospitalAppointmentLines(models.Model):
        _name = 'hospital.appointment.lines'
        _description = 'Appointment Lines'

        product_id = fields.Many2one('product.product',string="Medicine")
        product_qty = fields.Integer(string="Quantity")
        appointment_id = fields.Many2one('hospital.appointment',string='Appointment ID')

